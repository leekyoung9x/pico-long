name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      BUILD_VERSION:
        description: 'Version number for the build'
        required: true
        default: '1.0.0'
      REBUILD:
        description: 'Rebuild code'
        required: true
        default: 'true'
        type: boolean

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Check and Install Java, Maven, Zip, Curl
        run: |
          echo "Checking system dependencies..."
          sudo apt update
          sudo apt install -y openjdk-17-jdk maven zip curl

      - name: Verify Installed Versions
        run: |
          java -version
          mvn -version
          zip --version
          curl --version

  build:
    runs-on: ubuntu-latest
    needs: setup-environment
    if: ${{ github.event.inputs.REBUILD == 'true' || github.event.inputs.REBUILD == true }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build with Maven
        run: mvn clean package -Dversion=${{ github.event.inputs.BUILD_VERSION }}

      - name: Zip the Build using ZIP
        run: |
          zip -r develop-${{ github.event.inputs.BUILD_VERSION }}.zip target/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-zip
          path: develop-${{ github.event.inputs.BUILD_VERSION }}.zip
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write  # Cần quyền để tạo release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-zip

      - name: Create GitHub Release (if not exists)
        run: |
          TAG="v${{ github.event.inputs.BUILD_VERSION }}"
          RELEASE_NAME="Release ${{ github.event.inputs.BUILD_VERSION }}"
          
          # Kiểm tra xem release đã tồn tại chưa
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "Release $TAG already exists. Skipping creation."
          else
            echo "Creating new release: $TAG"
            gh release create "$TAG" develop-${{ github.event.inputs.BUILD_VERSION }}.zip --title "$RELEASE_NAME" --notes "Automated release for version ${{ github.event.inputs.BUILD_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build to Release
        run: |
          TAG="v${{ github.event.inputs.BUILD_VERSION }}"
          gh release upload "$TAG" develop-${{ github.event.inputs.BUILD_VERSION }}.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-fpt:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-zip

      - name: Install Python WinRM Module
        run: pip install pywinrm

      - name: Upload Build to Windows FPT Server via WinRM
        run: |
          python - <<EOF
          import winrm

          # Kết nối đến FPT Server (thực ra là Windows VPS) qua WinRM
          session = winrm.Session("${{ secrets.FTP_HOST }}", auth=("${{ secrets.FTP_USERNAME }}", "${{ secrets.FTP_PASSWORD }}"), transport="ntlm")

          # Tải file từ GitHub Releases về FPT Server
          url = "https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.BUILD_VERSION }}/develop-${{ github.event.inputs.BUILD_VERSION }}.zip"
          dest = R"C:\\Users\\${{ secrets.FTP_USERNAME }}\\Downloads\\develop-${{ github.event.inputs.BUILD_VERSION }}.zip"
          command = f"powershell -Command Invoke-WebRequest -Uri {url} -OutFile {dest}"
          result = session.run_ps(command)

          print(result.std_out.decode())
          print(result.std_err.decode())
          EOF

      - name: Extract Build on FPT Server
        run: |
          python - <<EOF
          import winrm

          # Kết nối lại với WinRM
          session = winrm.Session("${{ secrets.FTP_HOST }}", auth=("${{ secrets.FTP_USERNAME }}", "${{ secrets.FTP_PASSWORD }}"), transport="ntlm")

          # Giải nén file trên FPT Server
          extract_command = R"powershell -Command Expand-Archive -Path 'C:\\Users\\${{ secrets.FTP_USERNAME }}\\Downloads\\develop-${{ github.event.inputs.BUILD_VERSION }}.zip' -DestinationPath 'C:\\Deploys'"
          result = session.run_ps(extract_command)

          print(result.std_out.decode())
          print(result.std_err.decode())
          EOF
